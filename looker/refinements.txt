Summary of Looker Documentation and Recommendations

Document 1: “LookML Refinements”

Summary:
This document covers the use of refinements in LookML to enhance existing models. Refinements allow for the extension or modification of existing Explores, views, and fields without altering the original LookML files. Key points include:

+ Extending Explores: Adding new fields, joins, and sets to existing Explores.
+ Refining Fields: Modifying field properties, such as labels, descriptions, and SQL logic.
+ Combining Refinements: Using multiple refinements to create complex data models.

Recommendations:

1. Leverage Refinements: Use refinements to extend and customize the predefined Explores and views in our LookML project without duplicating code.
2. Modular Approach: Organize refinements into separate files to maintain a clean and manageable codebase.
3. Documentation: Clearly document each refinement to ensure that future developers understand the purpose and impact of each change.

Document 2: “Managing LookML Files and Folders”

Summary:
This document provides guidelines for organizing and managing LookML files and folders within a project. It covers:

+ Naming Conventions: Importance of consistent naming conventions (lowercase letters, no spaces or special characters).
+ Creating Folders and Files: Steps to create and organize folders and files within the Looker IDE.
+ Uploading Files: Instructions for uploading files from your computer to the Looker project.

Recommendations:

1. Consistent Naming Conventions: Adopt and enforce a consistent naming convention across all LookML files and folders to avoid issues with case sensitivity and special characters.
2. Folder Organization: Create a clear folder structure to separate different types of LookML files (e.g., views, models, dashboards).
3. File Management: Regularly review and organize files to keep the project tidy and easy to navigate.

Document 3: “Types of Files in a LookML Project”

Summary:
This document outlines the various types of files that can be included in a LookML project, including:

+ Model Files: Define database connections and Explores.
+ View Files: Specify tables and fields for querying.
+ Dashboard Files: Define LookML dashboards.
+ Data Files: Include JSON, TopoJSON, or GeoJSON files for custom maps.
+ Document Files: Markdown files for documentation.
+ Locale Strings Files: JSON files for localization.
+ Explore Files: Separate files for derived tables or extended Explores.
+ Data Test Files: Used for testing LookML logic.

Recommendations:

1. Use Appropriate File Types: Ensure each LookML element is placed in the correct file type (e.g., models in .model.lkml, views in .view.lkml).
2. Documentation: Utilize document files to provide thorough documentation for the data model and project structure.
3. Data Tests: Implement data test files to verify the integrity and accuracy of the LookML logic, ensuring reliable analytics.

Overall Recommendations for Improving the Looker Component of Our Project

1. Refinements and Extensions: Use refinements to extend and customize existing models and views, keeping the original LookML files clean and maintainable.
2. Organized Folder Structure: Create a well-organized folder structure in the Looker IDE to separate different types of LookML files, making the project easier to manage and navigate.
3. Consistent Naming Conventions: Adopt consistent naming conventions for all files and folders to avoid issues related to case sensitivity and special characters.
4. Comprehensive Documentation: Use document files to create detailed documentation for the data model, project structure, and any customizations or refinements made.
5. Data Testing: Implement data tests to ensure the accuracy and reliability of the LookML logic, reducing the risk of errors in the analytics.
6. Regular Reviews: Periodically review and organize LookML files to keep the project clean and maintainable, making it easier for new developers to understand and contribute.

To implement the recommendations for leveraging refinements, using a modular approach, and documenting refinements in your LookML project, follow these steps:

1. Leverage Refinements

Refinements allow you to extend or customize existing Explores and views without altering the original LookML files. Here’s how to create and use refinements:

Example: Refining an Explore

+ Original Explore: Let’s say you have an existing Explore in order_explore.view.lkml that you want to extend.
```
explore: order_explore {
  view_name: order
  join: user {
    sql_on: ${order.user_id} = ${user.id} ;;
  }
}
```
+ Refinement File: Create a new file order_explore_refinements.view.lkml to add refinements.
```
explore: order_explore {
  extends: [order_explore]

  join: product {
    sql_on: ${order.product_id} = ${product.id} ;;
  }

  field: new_metric {
    type: number
    sql: ${order.amount} * ${order.quantity} ;;
  }
}
```
2. Modular Approach

Organize your refinements into separate files for better manageability. For example:

+ Create a folder named refinements in your project.
+ Create separate files for each Explore or view refinement.

Folder Structure:
/your_project
  /refinements
    order_explore_refinements.view.lkml
    user_explore_refinements.view.lkml
3. Documentation

Clearly document each refinement to ensure that future developers understand the purpose and impact of each change.

Example: Documenting Refinements

+ Add comments at the beginning of each refinement file to explain its purpose.
```
# order_explore_refinements.view.lkml
# This refinement adds a join to the product view and a new calculated metric to the order_explore.

explore: order_explore {
  extends: [order_explore]

  join: product {
    sql_on: ${order.product_id} = ${product.id} ;;
  }

  field: new_metric {
    type: number
    sql: ${order.amount} * ${order.quantity} ;;
  }
}
```
Implementation Steps

1. Create Refinement Files:
+ Create a new folder named refinements within your LookML project.
+ Create separate refinement files for each Explore or view you want to extend.
2. Use the extends Property:
+ Use the extends property to extend the existing Explores or views in your refinement files.
+ Add new fields, joins, or changes as needed within these files.
3. Document Your Changes:
+ Add comments at the beginning of each refinement file to describe the purpose and changes made.
+ Ensure that each refinement file includes clear and concise documentation.

Example Folder Structure
/your_project
  /views
    order_explore.view.lkml
    user_explore.view.lkml
  /refinements
    order_explore_refinements.view.lkml
    user_explore_refinements.view.lkml

Example Refinement File
/refinements/order_explore_refinements.view.lkml
```
# Refinement for order_explore to add a join to the product view and a new metric

explore: order_explore {
  extends: [order_explore]

  join: product {
    sql_on: ${order.product_id} = ${product.id} ;;
  }

  field: new_metric {
    type: number
    sql: ${order.amount} * ${order.quantity} ;;
  }
}
Example Refinement File for User Explore

/refinements/user_explore_refinements.view.lkml
```
# Refinement for user_explore to add a new field for full name
```
explore: user_explore {
  extends: [user_explore]

  dimension: full_name {
    type: string
    sql: ${user.first_name} || ' ' || ${user.last_name} ;;
  }
}
```
Benefits

+ Modularity: Keeping refinements in separate files ensures a clean and manageable codebase.
+ Maintainability: Clear documentation helps future developers understand the purpose and impact of each refinement.
+ Flexibility: Refinements allow you to extend and customize your LookML models without duplicating code.
